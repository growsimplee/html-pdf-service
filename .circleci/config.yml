# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs

orbs:
  aws-cli: circleci/aws-cli@2.0.0
  aws-ecs: circleci/aws-ecs@2.2.1

executors:
  docker_build:
    machine:
      image: ubuntu-2004:202010-01
      resource_class: medium

jobs:
  build_and_push_dev:
    executor: docker_build

    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: ACCESS_KEY_ID
          aws-secret-access-key: AWS_ACCESS_KEY
          aws-region: AWS_REGION
      - run:
          name: "Login docker"
          command: "docker login -u AWS -p $(aws ecr get-login-password ) 895469091637.dkr.ecr.ap-south-1.amazonaws.com"
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }} # appends cache key with a hash of pom.xml file
            - v1-dependencies- # fallback in case previous cache key is not found
      - run:
          name: "Build jar"
          command: |
            echo ${CIRCLE_BRANCH}
            mv src/main/resources/application-${CIRCLE_BRANCH}.properties src/main/resources/application.properties
            mvn clean install -P jar
      - store_artifacts:
          path: ./target/*.jar
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - run:
          name: "Docker build"
          command: |
            cd docker
            DOCKER_REGISTER="895469091637.dkr.ecr.ap-south-1.amazonaws.com" DOCKER_IMAGE=${CIRCLE_BRANCH} docker-compose build
            DOCKER_REGISTER="895469091637.dkr.ecr.ap-south-1.amazonaws.com" DOCKER_IMAGE=${CIRCLE_BRANCH} docker-compose push
      - run:
          name: "Update service"
          command: aws ecs update-service --cluster "Springboot-Dev-Simplee-Grow" --service "dev-html" --force-new-deployment

  build_and_push_stage:
    executor: docker_build

    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: ACCESS_KEY_ID
          aws-secret-access-key: AWS_ACCESS_KEY
          aws-region: AWS_REGION
      - run:
          name: "Login docker"
          command: "docker login -u AWS -p  $(aws ecr get-login-password --region us-east-2) 895469091637.dkr.ecr.us-east-2.amazonaws.com"
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }} # appends cache key with a hash of pom.xml file
            - v1-dependencies- # fallback in case previous cache key is not found
      - run:
          name: "Build jar"
          command: |
            echo ${CIRCLE_BRANCH}
            mv src/main/resources/application-${CIRCLE_BRANCH}.properties src/main/resources/application.properties
            mvn clean install -P jar
      - store_artifacts:
          path: ./target/*.jar
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - run:
          name: "Docker build"
          command: |
            cd docker
            DOCKER_REGISTER="895469091637.dkr.ecr.us-east-2.amazonaws.com" DOCKER_IMAGE=${CIRCLE_BRANCH} docker-compose build
            DOCKER_REGISTER="895469091637.dkr.ecr.us-east-2.amazonaws.com" DOCKER_IMAGE=${CIRCLE_BRANCH} docker-compose push
      - run:
          name: "Update service"
          command: aws ecs update-service --cluster "Springboot-Dev-Simplee-Grow" --service "stage-html" --force-new-deployment
  build_and_push_prod:
    executor: docker_build

    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: ACCESS_KEY_ID
          aws-secret-access-key: AWS_ACCESS_KEY
          aws-region: AWS_REGION
      - run:
          name: "Login docker"
          command: "docker login -u AWS -p  $(aws ecr get-login-password --region ap-south-1) 229301422682.dkr.ecr.ap-south-1.amazonaws.com"
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }} # appends cache key with a hash of pom.xml file
            - v1-dependencies- # fallback in case previous cache key is not found
      - run:
          name: "Build jar"
          command: |
            mv src/main/resources/application-prod-docker.properties src/main/resources/application.properties
            mvn clean install -P jar -DskipTests=true
      - store_artifacts:
          path: ./target/*.jar
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - run:
          name: "Docker build"
          command: |
            cd docker
            DOCKER_REGISTRY="229301422682.dkr.ecr.ap-south-1.amazonaws.com" DOCKER_IMAGE=prod docker-compose build
            DOCKER_REGISTRY="229301422682.dkr.ecr.ap-south-1.amazonaws.com" DOCKER_IMAGE=prod docker-compose push
      - run:
          name: "Update service"
          command: aws ecs update-service --cluster "Springboot-Simplee-Grow" --service "Prod-html" --force-new-deployment



workflows:
  version: 2
  build-maven:
    jobs:
      - build_and_push_dev:
          context: Aws-dev
          filters:
            branches:
              only: dev
      - build_and_push_stage:
          context: Aws-stage
          filters:
            branches:
              only: stage
      - build_and_push_prod:
          context: Aws-prod
          filters:
            branches:
              only: prod-docker
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows

